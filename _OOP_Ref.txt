Working On:
    Tracing GMRFilm
        Tracing Standard - related somehow to EPMASTDS
            Testing Phirzeq
            Checking Phirzeq eqs

Other:
    This thing
    make way for element to suggest line if energy is too low...
    what is el.flag?   flags
    what is ff in std and phirhoz

Analysis Sample
            self.toa
            self.volts
            self.layers
            self.phimodel

            self.csctheta

    def get_layers(self, layers=[]):
    def get_phimodel():
    def update_layers_depth(self):
    def get_volts(self):
    def check_volts(self):
    def get_toa(self):
    def fixlayers(self):
    def find_ovl_macs(self, el1, layindex):
    def get_macs(self):
        el1.mac[el2.name]
    def qe0(self, el, volt, phimodel=None):
    def get_valences(self):
    def calc_stoich(self):
    def calc_thick0(self):


Film Layer
        self.fix
        self.els
        self.rho
    def get_els(self, els=[]):
    def get_dens(self):
    def fixlayer(self):

Atomic Element(self, name=None, line=None, volt=None, opt=None):

el_p.ovl_macs[i]
el1.mac[el2.name]
        # Working Concentration (Maybe Kratio and weight fraction)
        self.ci = 0
        # Log previous c values (clog[0]-values, clog[1]-setby)
        self.clog = [[0, 'init']]
        # Get element data from tables or calculation
        # Electron shell e.g. K, L1, M1, N1
        self.shell = self.get_shell()
        # Fluorescence Yields
        self.omega = self.get_omega()
        # Number of electrons in the ionized shell.
        self.znl = self.get_znl()
        # JUMP Ratios
        self.rjump = self.get_rjump()
        # EFFective Fluorescence YieLD
        self.effyld = self.get_effyld()
        # TRaNSition PROBability of line after shell ionization
        self.trnsprob = self.get_trnsprob()
        self.mass = float(data[cols.index('Mass')])

        self.edge = edge if edge > 0.0 else 50000.0

        self.ck = float(

        self.xray = xray



Mac
Currently working on:
    Tracing from GMRfilm

In progress:
    pap
    standard


papwt.py
    ppint1(x, L, R):
    ppint2(a, b, r, c, x):
    papwt(delta, cnc, nel, nels, L, R):   return c1


get_data.py
    get_data(z, dat)     return value
    omega(z, nedge)    return omega
    line_to_shell(line): return shell
    znl(line): return znl
    edge(z, line)     return edge
    ck(z, j)      return ck
    xray(z, line)    return xray
    rjump(z, nedge)   return rjump
    fix_el(el=None, z=None, line=None)   return el, z, line
    lookup(el, line=None):     return (z, mass, ecr[if line != None])


get_cfg.py
    get_options(message, options=('Y', 'N'), defalt='N'):   return var
    get_nums(message, maxi, mini, default):    return out
    gettoa():    return toa
    getcfg(cfg):    return cfg, mode, macchang
    getvolt():     return cvolt, e0, voltages
    getmodel():     return phipar
    newvolt(nels, els, e0, mode):     return e0
    newline(nels, els, e0, lines):     return (ec, lines)
    macstd(z1, z2, mass, line, sy1, sy2, macchang, caller):   return xmu
    elements(mode, voltages, stds0,stds1,stds2,standrd,voltages):

wtfract(els, lines,form, nel): return(cnc)

fixlayer(

layrdens(nel): return rho

trnsprob(z, line): return trnsprob

layrelem(nel, j):      return (ne, layer)

mu(zx1, zx2, line, ax2):   return xmu  ???

mac(z, mass, xray):    return (xmu, iflag??)

effyld(z, line, ?xenergy?, exciter):       return effyld

paplimts(ad1,ad2,icase,rc,rx): return lim

